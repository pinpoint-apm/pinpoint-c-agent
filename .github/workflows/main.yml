name: CI

on: [pull_request, workflow_dispatch]

jobs:
  cpp:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - name: actions-setup-cmake
        uses: jwlawson/actions-setup-cmake@v1.6
        with:
          cmake-version: "3.16.x"
      - name: Build agent
        run: |
          cd common
          mkdir -p build
          cd build
          cmake -DWITH_TEST_CASE=1 -DWITH_CODECOVERAGE=1 -DCMAKE_BUILD_TYPE=Debug  .. 
          make
          ./bin/TestCommon
      - name: Codecovage
        uses: codecov/codecov-action@v1

  memory-leak:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: actions-setup-cmake
        uses: jwlawson/actions-setup-cmake@v1.6
        with:
          cmake-version: "3.16.x"
      - name: Build agent
        run: |
          sudo apt update || echo "update failed,but try to overlook it"
          sudo apt install -y valgrind -y valgrind
          cd common
          mkdir -p build
          cd build
          cmake -DWITH_TEST_CASE=1 -DCMAKE_BUILD_TYPE=Debug  .. 
          make
          valgrind --leak-check=full \
            --show-leak-kinds=all \
            --track-origins=yes \
            --verbose \
            --log-file=valgrind-out.txt \
            ./bin/TestCommon
      - name: Archive docs
        uses: actions/upload-artifact@v3
        with:
          name: valgrind-out
          path: common/build/valgrind-out.txt
  # PHP5:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       php-versions: ["5.6", "5.4", "5.5"]
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: shivammathur/setup-php@v2
  #       with:
  #         php-version: ${{ matrix.php-versions }}
  #     - run: |
  #         phpize
  #         ./configure
  #         make
  #         make test TESTS=src/PHP/tests5/

  PHP7:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # php-versions: ["7.0", "7.1", "7.2", "7.3", "7.4", "8.0"]
        php-versions: ["7.0"]
    steps:
      - uses: actions/checkout@v2
      # - name: set mysql
      #   run: |
      #     sudo service mysql start
      #     sudo mysql --host='127.0.0.1' --user='root' --password='root' < '/home/runner/work/pinpoint-c-agent/pinpoint-c-agent/testapps/PHP/tests/script.sql'
      # - name: set redis
      #   run: |
      #     sudo apt-get install redis-server
      - uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }}
          extensions: redis-phpredis/phpredis@5.3.4
      - name: testapp
        run: |
          phpize
          ./configure
          make
          make test TESTS=src/PHP/tests/
          # sudo make install
          # sudo echo "extension=pinpoint_php.so" >> /etc/php/${{ matrix.php-versions }}/cli/php.ini
          # sudo echo "error_log = /home/runner/work/pinpoint-c-agent/pinpoint-c-agent/testapps/PHP/tests/php_error.log" >> /etc/php/${{ matrix.php-versions }}/cli/php.ini
          # sudo echo "pinpoint_php.DebugReport=true" >> /etc/php/${{ matrix.php-versions }}/cli/php.ini
          # cd testapps/PHP
          # composer install
          # cp tests/think .
          # php think unit -v
          
  Python:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ["3.8","3.9","3.10","3.11"]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: jwlawson/actions-setup-cmake@v1.6
        with:
          cmake-version: "3.16.x"
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - run: |
          pip install -r requirements.txt 
          python setup.py install || echo "failed, but ignore"
          # nosetests does not support python3 anymore
          # nosetests src/PY/test --ignore-files="TestCoroutines.*"
          python -m unittest discover -s src/PY/test -p 'Test*.py'

  Collector-agent:
    strategy:
      matrix:
        go-version: [1.18.x]
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go-version }}
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: 'true'

      - name: Setup protoc
        uses: arduino/setup-protoc@v2.1.0
      
      - run: |
          go install google.golang.org/protobuf/cmd/protoc-gen-go@latest && go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
          # cd collector-agent
          # go mod download
          # go build
          # go test ./... -v
          cd collector-agent && make && go test ./... -v